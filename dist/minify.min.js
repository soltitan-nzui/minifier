import{readFile}from"node:fs/promises";import path from"node:path";import tryToCatch from"try-to-catch";import debug from"debug";import js from"./js.js";import html from"./html.js";import css from"./css.js";import img from"./img.js";import auto from"./auto.js";const log=debug("minify"),minifiers={js:js,html:html,css:css,img:img,auto:auto},{assign:assign}=Object;function check(t){if(!t)throw Error("name could not be empty!")}assign(minify,minifiers);export async function minify(t,i){check(t);const o=path.extname(t).slice(1);if(!["js","html","css"].includes(o))throw Error(`File type "${o}" not supported.`);return log("optimizing "+path.basename(t)),await optimize(t,i)}async function optimize(t,i){check(t),log("reading file "+path.basename(t));const o=await readFile(t,"utf8");return await onDataRead(t,o,i)}async function onDataRead(t,i,o){log(`file ${path.basename(t)} read`);const e=path.extname(t).replace(/^\./,""),a=await minifiers[e](i,o);let s;return"css"===e&&([,s]=await tryToCatch(minifiers.img,t,a,o)),s||a}